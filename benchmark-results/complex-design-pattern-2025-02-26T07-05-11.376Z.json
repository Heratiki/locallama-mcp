{
  "taskId": "complex-design-pattern",
  "task": "Implement a TypeScript class that uses the Observer design pattern for a pub/sub event system with strong typing.",
  "contextLength": 800,
  "outputLength": 464,
  "complexity": 0.8,
  "local": {
    "model": "stable-code-instruct-3b",
    "timeTaken": 6302.333333333333,
    "successRate": 1,
    "qualityScore": 0.8500000000000001,
    "tokenUsage": {
      "prompt": 43,
      "completion": 464,
      "total": 507
    },
    "output": "```typescript\n// Define an interface for observers\ninterface Observer {\n  update(eventData: any): void;\n}\n\nexport class EventSystem {\n  private _observers: Observer[] = [];\n\n  public subscribe(observer: Observer): void {\n    if (!this._observers.some((item) => item === observer)))) {\n      this._observers.push(observer);\n    } else {\n      throw new Error(\"An observer with the same ID already exists.\");\n    }\n  }\n\n  public unsubscribe(observer: Observer): void {\n    const index = this._observers.findIndex((item) => item === observer));\n    if (index !== -1) {\n      this._observers.splice(index, 1);\n    } else {\n      throw new Error(\"No observer with the same ID exists.\");\n    }\n  }\n\n  public publish(eventData: any): void {\n    this._observers.forEach((observer) => observer.update(eventData)));\n  }\n}\n\nexport class MyObserver implements Observer {\n  private _id: number;\n\n  constructor(id: number) {\n    this._id = id;\n  }\n\n  public get id(): number {\n    return this._id;\n  }\n\n  public update(eventData: any): void {\n    console.log(`Observer ${this._id}'s event data updated:`);\n    console.log(eventData);\n  }\n}\n```\n\nThis TypeScript code defines an `EventSystem` class that uses the Observer design pattern for a pub/sub event system with strong typing. The `MyObserver` class implements the `Observer` interface and logs updates to the console."
  },
  "paid": {
    "model": "gpt-3.5-turbo",
    "timeTaken": 0,
    "successRate": 0,
    "qualityScore": 0,
    "tokenUsage": {
      "prompt": 0,
      "completion": 0,
      "total": 0
    },
    "cost": 0,
    "output": ""
  },
  "timestamp": "2025-02-26T07:04:52.466Z"
}