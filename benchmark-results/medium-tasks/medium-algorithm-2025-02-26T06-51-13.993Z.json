{
  "taskId": "medium-algorithm",
  "task": "Implement a binary search algorithm in JavaScript with proper error handling and edge cases.",
  "contextLength": 500,
  "outputLength": 578,
  "complexity": 0.5,
  "local": {
    "model": "qwen2.5-coder-3b-instruct",
    "timeTaken": 7540.666666666667,
    "successRate": 1,
    "qualityScore": 0.8500000000000001,
    "tokenUsage": {
      "prompt": 34,
      "completion": 578,
      "total": 612
    },
    "output": "Here's a JavaScript implementation of the binary search algorithm, which is an efficient method for finding an element in a sorted array. This version includes error handling to manage invalid inputs and edge cases such as empty arrays or single-element arrays.\n\n```javascript\nfunction binarySearch(arr, target) {\n    // Check if the input is valid\n    if (!Array.isArray(arr)) {\n        throw new Error('Input must be an array.');\n    }\n    \n    // Return -1 if the array is empty\n    if (arr.length === 0) {\n        return -1;\n    }\n\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        // Check if the target is present at mid\n        if (arr[mid] === target) {\n            return mid; // Return the index of the target\n        } else if (arr[mid] < target) {\n            left = mid + 1; // Target lies in the right subarray\n        } else {\n            right = mid - 1; // Target lies in the left subarray\n        }\n    }\n\n    return -1; // Target is not present in the array\n}\n\n// Example usage:\nconst sortedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconsole.log(binarySearch(sortedArray, 7)); // Output: 6\n\ntry {\n    console.log(binarySearch(\"not an array\", 5)); // Should throw an error\n} catch (error) {\n    console.error(error.message); // Output: Input must be an array.\n}\n\nconsole.log(binarySearch([], 3)); // Output: -1\n```\n\n### Explanation:\n\n- **Input Validation**: The function first checks if the input is an array. If not, it throws an error.\n\n- **Empty Array Check**: If the array is empty, the function returns `-1` because no element can be found.\n\n- **Binary Search Logic**:\n  - Initialize two pointers: `left` at the start of the array and `right` at the end.\n  - Calculate the middle index `mid`.\n  - Compare the middle element with the target:\n    - If they are equal, return the middle index.\n    - If the middle element is less than the target, move the `left` pointer to `mid + 1`.\n    - If the middle element is greater than the target, move the `right` pointer to `mid - 1`.\n  - Continue this process until the `left` pointer exceeds the `right` pointer.\n\n- **Edge Cases**:\n  - If the input is not an array, a custom error message is provided.\n  - If the array is empty, the function immediately returns `-1`.\n  - If the target is not found in the array, the function returns `-1`.\n\nThis implementation efficiently searches for a target value in a sorted array with a time complexity of O(log n)."
  },
  "paid": {
    "model": "gpt-3.5-turbo",
    "timeTaken": 0,
    "successRate": 0,
    "qualityScore": 0,
    "tokenUsage": {
      "prompt": 0,
      "completion": 0,
      "total": 0
    },
    "cost": 0,
    "output": ""
  },
  "timestamp": "2025-02-26T06:50:51.370Z"
}