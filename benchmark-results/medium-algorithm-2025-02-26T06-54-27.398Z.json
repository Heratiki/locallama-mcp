{
  "taskId": "medium-algorithm",
  "task": "Implement a binary search algorithm in JavaScript with proper error handling and edge cases.",
  "contextLength": 500,
  "outputLength": 445,
  "complexity": 0.5,
  "local": {
    "model": "qwen2.5-7b-instruct-1m",
    "timeTaken": 50218,
    "successRate": 1,
    "qualityScore": 0.8500000000000001,
    "tokenUsage": {
      "prompt": 34,
      "completion": 445,
      "total": 479
    },
    "output": "Certainly! Below is an implementation of a binary search algorithm in JavaScript, complete with error handling and consideration for various edge cases:\n\n```javascript\nfunction binarySearch(arr, target) {\n    // Check if the input array is valid\n    if (!Array.isArray(arr)) {\n        throw new Error(\"Input must be an array.\");\n    }\n\n    // Check if the array is sorted\n    if (arr.some((value, index, self) => index > 0 && self[index - 1] > value)) {\n        throw new Error(\"The array must be sorted in ascending order.\");\n    }\n\n    let left = 0;\n    let right = arr.length - 1;\n\n    while (left <= right) {\n        const mid = Math.floor((left + right) / 2);\n\n        if (arr[mid] === target) {\n            return mid; // Target found\n        } else if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n\n    return -1; // Target not found\n}\n\n// Example usage:\ntry {\n    const sortedArray = [1, 3, 5, 7, 9, 11, 13];\n    const target = 7;\n    const index = binarySearch(sortedArray, target);\n    if (index !== -1) {\n        console.log(`Element found at index: ${index}`);\n    } else {\n        console.log(\"Element not found in the array.\");\n    }\n} catch (error) {\n    console.error(error.message);\n}\n```\n\n### Key Points:\n- **Error Handling**: The function checks if the input is an array and if the array is sorted. If either condition is violated, it throws an error.\n- **Edge Cases**: \n  - Empty array: The algorithm handles this by checking the bounds of `left` and `right`.\n  - Target not in the array: Returns `-1` to indicate that the target was not found.\n  - Non-sorted arrays: Throws an error if the array is not sorted, ensuring the function operates correctly only on valid inputs.\n\nThis implementation ensures robustness by handling invalid inputs gracefully and providing clear feedback when necessary."
  },
  "paid": {
    "model": "gpt-3.5-turbo",
    "timeTaken": 0,
    "successRate": 0,
    "qualityScore": 0,
    "tokenUsage": {
      "prompt": 0,
      "completion": 0,
      "total": 0
    },
    "cost": 0,
    "output": ""
  },
  "timestamp": "2025-02-26T06:51:56.743Z"
}