{
  "taskId": "medium-algorithm",
  "task": "Implement a binary search algorithm in JavaScript with proper error handling and edge cases.",
  "contextLength": 500,
  "outputLength": 404,
  "complexity": 0.5,
  "local": {
    "model": "stable-code-instruct-3b",
    "timeTaken": 5238,
    "successRate": 1,
    "qualityScore": 0.8500000000000001,
    "tokenUsage": {
      "prompt": 36,
      "completion": 404,
      "total": 440
    },
    "output": "Here is an implementation of a binary search algorithm in JavaScript:\n\n```javascript\nfunction binarySearch(arr, target) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"First argument must be an array.\");\n  }\n\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left <= right) {\n    const mid = Math.floor((left + right) / 2));\n\n    if (arr[mid] === target) {\n      return mid;\n    } else if (arr[mid] < target) {\n      left = mid + 1;\n    } else {\n      right = mid - 1;\n    }\n  }\n\n  throw new Error(\"Target not found in array.\"));\n}\n```\n\nTo use this function, you can call it with an array and a target value like this:\n\n```javascript\nconst arr = [1, 2, 3, 4, 5];\nconst target = 3;\n\ntry {\n  const index = binarySearch(arr, target));\n  console.log(`Target ${target} found at index ${index}.`));\n} catch (error) {\n  console.error(error);\n}\n```\n\nThis will output: `Target 3 found at index 2.`\n\nNote that the function assumes the input array is sorted in ascending order, as binary search relies on this assumption. If the array is not sorted, you may need to modify the algorithm accordingly."
  },
  "paid": {
    "model": "gpt-3.5-turbo",
    "timeTaken": 0,
    "successRate": 0,
    "qualityScore": 0,
    "tokenUsage": {
      "prompt": 0,
      "completion": 0,
      "total": 0
    },
    "cost": 0,
    "output": ""
  },
  "timestamp": "2025-02-26T06:50:35.646Z"
}