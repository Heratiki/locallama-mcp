{
  "taskId": "simple-function",
  "task": "Write a JavaScript function that calculates the factorial of a number.",
  "contextLength": 200,
  "outputLength": 280,
  "complexity": 0.2,
  "local": {
    "model": "qwen2.5-coder-3b-instruct",
    "timeTaken": 3917.3333333333335,
    "successRate": 1,
    "qualityScore": 0.8500000000000001,
    "tokenUsage": {
      "prompt": 31,
      "completion": 280,
      "total": 311
    },
    "output": "Here's a simple JavaScript function to calculate the factorial of a non-negative integer using recursion:\n\n```javascript\n/**\n * Calculates the factorial of a given non-negative integer.\n *\n * @param {number} num - The non-negative integer whose factorial is to be calculated.\n * @returns {number} The factorial of the input number.\n */\nfunction calculateFactorial(num) {\n    // Base case: if num is 0 or 1, return 1\n    if (num === 0 || num === 1) {\n        return 1;\n    }\n    // Recursive case: multiply num by the factorial of num-1\n    else {\n        return num * calculateFactorial(num - 1);\n    }\n}\n```\n\n### Explanation:\n- **Base Case**: The function checks if `num` is either 0 or 1. In both cases, it returns 1 because the factorial of 0 and 1 is defined as 1.\n- **Recursive Case**: If `num` is greater than 1, the function calls itself with `num - 1` and multiplies the result by `num`. This continues until it reaches the base case.\n\nThis implementation is straightforward and works well for small to moderately large values of `num`. For very large numbers, JavaScript's number type has a limit, so consider using libraries or other techniques for handling larger factorials if needed."
  },
  "paid": {
    "model": "gpt-3.5-turbo",
    "timeTaken": 0,
    "successRate": 0,
    "qualityScore": 0,
    "tokenUsage": {
      "prompt": 0,
      "completion": 0,
      "total": 0
    },
    "cost": 0,
    "output": ""
  },
  "timestamp": "2025-02-26T06:39:35.647Z"
}